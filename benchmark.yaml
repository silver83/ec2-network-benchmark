---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 Network Benchmark: benchmark'
Parameters:
  SubnetId:
    Description: 'Subnet to launch in'
    Type: String
  ParentGlobalStack:
    Description: 'Stack name of parent global stack based on global.yaml template.'
    Type: String
    Default: ''
  InstanceTypeClient:
    Description: 'The instance type for the EC2 instance.'
    Type: String
    Default: 't2.micro'
  SpotPriceClient:
    Description: 'The spot price for the EC2 instance.'
    Type: Number
    Default: 0
  InstanceTypeServer:
    Description: 'The instance type for the EC2 instance.'
    Type: String
    Default: 't2.micro'
  SpotPriceServer:
    Description: 'The spot price for the EC2 instance.'
    Type: Number
    Default: 0
Mappings:
  RegionMap:
    # ami-0947d2ba12ee1ff75 (64-bit x86) / ami-007a607c4abd192db (64-bit Arm)
    ap-northeast-1:
      AMD64: ami-0a2de1c3b415889d2
    ap-northeast-2:
      AMD64: ami-0b4fdb56a00adb616
    ap-south-1:
      AMD64: ami-06bcd1131b2f55803
    ap-southeast-1:
      AMD64: ami-0b84d2c53ad5250c2
    ap-southeast-2:
      AMD64: ami-08589eca6dcc9b39c
    ca-central-1:
      AMD64: ami-076b4adb3f90cd384
    eu-central-1:
      AMD64: ami-034fffcc6a0063961
    eu-west-1:
      AMD64: ami-09693313102a30b2c
      ARM64: ami-0b97e17c772f052e6
    eu-west-2:
      AMD64: ami-0274e11dced17bb5b
    eu-west-3:
      AMD64: ami-051707cdba246187b
    sa-east-1:
      AMD64: ami-0112d42866980b373
    us-east-1:
      AMD64: ami-0947d2ba12ee1ff75
      ARM64: ami-007a607c4abd192db
    us-east-2:
      AMD64: ami-02e680c4540db351e
      ARM64: ami-0998858ab6ad47da8
    us-west-1:
      AMD64: ami-011b6930a81cd6aaf
    us-west-2:
      AMD64: ami-01bbe152bf19d0289
      ARM64: ami-0f374ff3bc5bb0929
Conditions:
  HasSpotPriceClient: !Not [!Equals [!Ref SpotPriceClient, 0]]
  HasSpotPriceServer: !Not [!Equals [!Ref SpotPriceServer, 0]]
  IsArmInstance: !Equals [ !Select [ 0, !Split ['.',  !Ref InstanceTypeClient] ], 'a1' ]
Resources:
  ClientMachineLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      # KeyName: 'ysshalom'
      # AssociatePublicIpAddress: true
      SpotPrice: !If [HasSpotPriceClient, !Ref SpotPriceClient, !Ref 'AWS::NoValue']
      IamInstanceProfile:
        'Fn::ImportValue': !Sub '${ParentGlobalStack}-IAMInstanceProfileName'
      ImageId:
        Fn::If:
          - IsArmInstance
          - !FindInMap [RegionMap, !Ref 'AWS::Region', ARM64]
          - !FindInMap [RegionMap, !Ref 'AWS::Region', AMD64]
      InstanceType: !Ref InstanceTypeClient
      SecurityGroups:
      - 'Fn::ImportValue': !Sub '${ParentGlobalStack}-SecurityGroupId'
      InstanceMonitoring: true
      UserData:
        'Fn::Base64': !Join
        - ''
        - - "#!/bin/bash -x \n"
          - "bash -ex << \"TRY\"\n"
          - "  amazon-linux-extras enable epel \n"
          - "  yum install -y epel-release \n"
          - "  yum clean all \n"
          - "  yum -y install iperf3 jq \n"
          - "  sleep 60 \n"
          - !Sub "SERVER_PRIVATE_IP=$(aws ec2 describe-instances --region ${AWS::Region} --filters 'Name=tag:aws:autoscaling:groupName,Values=${ServerMachineAutoScalingGroup}' 'Name=instance-state-name,Values=running' --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text)"
          - " iperf3 --client $SERVER_PRIVATE_IP --time 3600 --interval 60 --version4 --json -P 10 | jq -c '{start: .start, intervals: .intervals, end: .end, instanceType: \""
          - !Sub "${InstanceTypeClient}"
          - "\", region: \""
          - !Sub "${AWS::Region}"
          - "\"}' | gzip | aws s3 cp - \"s3://"
          - 'Fn::ImportValue': !Sub '${ParentGlobalStack}-S3BucketName'
          - !Sub "/v2/d=$(date +%Y-%m-%d)/${InstanceTypeClient}-$(date +%s).json.gz\" \n"
          - "TRY\n"
          - !Sub "/opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ClientMachineAutoScalingGroup \n"
  ClientMachineAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName:  !Ref ClientMachineLaunchConfig
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      VPCZoneIdentifier: 
      - !Ref SubnetId
      Tags:
      - Key: Name
        Value: 'EC2 Network Benchmark Client'
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT75M
  ServerMachineLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      # KeyName: 'ysshalom'
      # AssociatePublicIpAddress: true
      SpotPrice: !If [HasSpotPriceServer, !Ref SpotPriceServer, !Ref 'AWS::NoValue']
      IamInstanceProfile:
        'Fn::ImportValue': !Sub '${ParentGlobalStack}-IAMInstanceProfileName'
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMD64]
      InstanceType: !Ref InstanceTypeServer
      SecurityGroups:
      - 'Fn::ImportValue': !Sub '${ParentGlobalStack}-SecurityGroupId'
      InstanceMonitoring: true
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          bash -ex << "TRY"
            yum-config-manager --enable epel
            yum clean all
            yum -y install iperf3
          TRY
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ServerMachineAutoScalingGroup
          iperf3 -s
  ServerMachineAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      LaunchConfigurationName:  !Ref ServerMachineLaunchConfig
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      VPCZoneIdentifier: 
      - !Ref SubnetId
      Tags:
      - Key: Name
        Value: 'EC2 Network Benchmark Server'
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
Outputs:
  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'
